<<<<<<< HEAD
/* TrainTissueStyles.css */

/* Global styles */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
}

/* Container styles */
.my-8 {
  margin-top: 2rem;
  margin-bottom: 2rem;
}

.mx-auto {
  margin-left: auto;
  margin-right: auto;
}

.max-w-4xl {
  max-width: 64rem;
}

/* Title styles */
.title {
  font-size: 2rem;
  font-weight: 900;
  color: #6f18f2;  /*Purple color*/
  margin-bottom: 0.5rem;
  text-align: left;
  margin-top: 0px;
}

.page-container {
  padding-top: 0;
}



/* Subtitle styles */
.subtitle {
  font-size: 1.75rem;
  font-weight: 800;
  color: #37097d; /* Medium gray color */
  margin-bottom: 1rem;
}

/* Form container styles */
.form-container {
  padding: 1.5rem;
  margin-top: 1.5rem;
  border-radius: 0.5rem;
  box-shadow: 0 0 0.5rem rgba(0, 0, 0, 0.1);
  background-color: #ffffff;
}

/* Form section styles */
.form-section {
  margin-bottom: 1.5rem;
}

/* Form title styles */
.form-title {
  font-size: 1.25rem;
  font-weight: bold;
  margin-bottom: 0.5rem;
}

/* Form input styles */
.class-input,
.image-input,
.dataset-input,
.learning-rate-input,
.batch-size-input,
.epoch-select,
.model-select {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #ccc;
  border-radius: 0.25rem;
  margin-bottom: 10px;
  margin-top: 10px;
}

/* Submit button styles */
.submit-button,
.add-class-button,
.train-button {
  width: 100%;
  padding: 0.75rem;
  font-weight: bold;
  color: #4f2b2b;
  border: none;
  border-radius: 0.25rem;
  cursor: pointer;
  background-color: #650d59; /* Updated background color */
}

.submit-button:hover,
.add-class-button:hover,
.train-button:hover {
  background-color: #3666af; /* Darker background color on hover */
}

/* Add class button styles */
.add-class-button {
  background-color: #3cba54;
}

/* Train button styles */
.train-button {
  background-color: #ffcc00;
}

/* Custom file upload styles */
.custom-file-upload {
  height: 200px;
  width: 300px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  border: 2px dashed #e8e8e8;
  background-color: #9772e2;
  padding: 1.5rem;
  border-radius: 10px;
  box-shadow: 0px 48px 35px -48px #e8e8e8;
  margin-bottom: 0.5rem;
}

.custom-file-upload .icon {
  display: flex;
  align-items: center;
  justify-content: center;
}

.custom-file-upload .icon svg {
  height: 80px;
  fill: #e8e8e8;
}

.custom-file-upload .text {
  display: flex;
  align-items: center;
  justify-content: center;
}

.custom-file-upload .text span {
  font-weight: 400;
  color: #e8e8e8;
}

.custom-file-upload input {
  display: none;
}

/* CLASS CONTAINERS */
.class-container {
  border: 1px solid #ccc;
  border-radius: 0.25rem;
  padding: 1rem;
  margin-bottom: 1rem;
  background-color: #f0ecf1;
}

/* CSS for class wrapper */
.class-wrapper {
  display: flex;
  align-items: flex-start; /* Align items at the top */
  margin-bottom: 10px; /* Adjust as needed */
}

/* CSS for file names container */
.file-names-container {
  width: 500px; /* Adjust the width as needed */
  height: 200px; /* Adjust the height as needed */
  overflow-y: auto; /* Enable vertical scrolling */
  border: 1px solid #ccc; /* Add border */
  flex-shrink: 0;
}

/* CSS for file names table */
.file-names-table {
  width: 100%; /* Make the table width 100% */
}

/* CSS for file name table rows */
.file-names-table tr td {
  padding: 5px;
  border-bottom: 1px solid #ccc; /* Add border bottom to separate rows */
}

/* CSS for file names */
.file-names-table tr:last-child td {
  border-bottom: none; /* Remove border bottom for the last row */
}


.upload-container {
  flex-grow: 1; /* Take remaining space */
}

.upload-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px; /* Adjust margin as needed */
  margin-top: 10px;
}
=======
import React, { useState } from "react";
import tw from "twin.macro";
import styled from "styled-components";
import Header from "components/headers/light";
import Footer from "components/footers/FiveColumnWithBackground";
import "./TrainTissueStyles.css"; // Import CSS file

const PageContainer = styled.div`
  ${tw`my-8 mx-auto max-w-4xl`}
`;

const FileInputContainer = styled.div`
    background-color: #ffff;
    padding-top: 20px;
    padding-left:20px;
    padding-right:20px;
    padding-bottom:10px;
    margin-bottom: 20px;
    
  ${tw`border border-gray-300 rounded-lg`}
`;


const ModelSelect = styled.select`
  ${tw`w-full p-3 border border-gray-300 rounded-lg text-gray-600 mb-1`}
`;

const UploadForm = styled.form`
  ${tw`mt-4`}
`;

const ClassInput = styled.input`
  ${tw`w-full p-3 border border-gray-300 rounded-lg text-gray-600 mb-1`}
`;

const ImageInput = styled.input`
  ${tw`w-full p-3 border border-gray-300 rounded-lg text-gray-600 mb-4`}
`;

const FormContainer = styled.div`
  ${tw`p-6 mt-6 rounded-lg shadow-lg`}
  background-color: #e6e6fa ;
`;

const FormTitle = styled.h3`
  ${tw`text-lg font-semibold text-gray-800 mb-2 mt-3`}
  text-align: left;
`;

const FormSection = styled.div`
  ${tw`mb-4 `}
`;

const ButtonContainer = styled.div`
  ${tw`flex`}
`;

const SubmitButton = styled.button`
background-color: #37097d ;
  ${tw` text-white font-bold py-2 px-4 rounded`}
  &:hover {
    background-color:#9400d3 ;
  }
`;

const AddClassButton = styled.button`
background-color: #37097d ;
  ${tw` text-white font-bold py-2 px-4 rounded`}
  margin-right: 10px; /* Add margin between Add Class and Upload & Submit */
  &:hover {
    background-color:#9400d3 ;
  }
`;

const TrainButton = styled.button`
background-color: #37097d ;
  ${tw` text-white font-bold py-2 px-4 rounded`}
  &:hover {
    background-color:#9400d3
  }
`;

const EpochSelect = styled.select`
  ${tw`w-full p-3 border border-gray-300 rounded-lg text-gray-600 mb-4`}
`;

const LearningRateInput = styled.input`
  ${tw`w-full p-3 border border-gray-300 rounded-lg text-gray-600 mb-4`}
`;

const BatchSizeInput = styled.input`
  ${tw`w-full p-3 border border-gray-300 rounded-lg text-gray-600 mb-4`}
`;

const TrainTissue = () => {
  const [selectedModel, setSelectedModel] = useState(""); 
  const [showCustomClasses, setShowCustomClasses] = useState(false); 
  const [classes, setClasses] = useState([{ name: "", images: [] }]);
  const [datasetName, setDatasetName] = useState(""); // State to store the dataset name
  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false); // State to toggle showing advanced options
  const [epochs, setEpochs] = useState(10); // State to store the number of epochs
  const [learningRate, setLearningRate] = useState(0.0001); // State to store the learning rate
  const [batchSize, setBatchSize] = useState(16); // State to store the batch size

  // Function to handle model selection
  const handleModelSelect = (e) => {
    const model = e.target.value;
    setSelectedModel(model);
    setShowCustomClasses(model === "resnet" || model === "cnn"); 
  };

  // Function to handle uploading images for custom classes
  const handleImageUpload = (classIndex, files) => {
    const updatedClasses = [...classes];
    updatedClasses[classIndex] = {
      ...updatedClasses[classIndex],
      images: files,
    };
    setClasses(updatedClasses);
  };

  // Function to handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();

    const formData = new FormData();
    formData.append("dataset_name", datasetName); // Add the dataset name to the form data

    for (let i = 0; i < classes.length; i++) {
      const currentClass = classes[i];
      for (let j = 0; j < currentClass.images.length; j++) {
        const currentImage = currentClass.images[j];
        formData.append("images", currentImage); // Append each image to the form data
        formData.append("class_names", currentClass.name); // Append the class name to the form data
      }
    }

    try {
      const response = await fetch("http://127.0.0.1:5000/upload_with_class", {
        method: "POST",
        body: formData,
      });

      if (response.ok) {
        console.log("Images uploaded and processed successfully");
        setShowAdvancedOptions(true); // Show advanced options form after successful upload
      } else {
        console.error("Failed to upload images");
      }
    } catch (error) {
      console.error("Error uploading images:", error);
    }
  };

  // Function to add a new class
  const addClass = () => {
    setClasses([...classes, { name: "", images: [] }]);
  };

  // Function to handle input change for class name
  const handleClassNameChange= (e, classIndex) => {
    const updatedClasses = [...classes];
    updatedClasses[classIndex] = {
      ...updatedClasses[classIndex],
      name: e.target.value,
    };
    setClasses(updatedClasses);
  };

  // Function to handle input change for dataset name
  const handleDatasetNameChange = (e) => {
    setDatasetName(e.target.value);
  };

  // Function to handle input change for number of epochs
  const handleEpochsChange = (e) => {
    setEpochs(parseInt(e.target.value));
  };

  // Function to handle input change for learning rate
  const handleLearningRateChange = (e) => {
    setLearningRate(parseFloat(e.target.value));
  };

  // Function to handle input change for batch size
  const handleBatchSizeChange = (e) => {
    setBatchSize(parseInt(e.target.value));
  };

  // Function to handle advanced options form submission (training)
  const handleAdvancedOptionsSubmit = async (e) => {
    e.preventDefault();

    // Perform model training with advanced options
    console.log("Model training started with the following advanced options:");
    console.log("Epochs:", epochs);
    console.log("Learning Rate:", learningRate);
    console.log("Batch Size:", batchSize);

    // You can make a POST request here to send the advanced options data to the backend for model training
  };

  const handleTrain = async (e) => {
    e.preventDefault();
  
    try {
      const response = await fetch("http://127.0.0.1:5000/train_tissue_cnn", {
        method: "POST",
      });
  
      if (response.ok) {
        console.log("Model training started successfully");
        // Optionally, you can handle success actions here
      } else {
        console.error("Failed to start model training");
        // Optionally, you can handle failure actions here
      }
    } catch (error) {
      console.error("Error starting model training:", error);
      // Optionally, you can handle error actions here
    }
  };

  return (
    <>
    <Header></Header>
      <PageContainer>
        <h1 className="title">Tissue Classification</h1>
        <FormContainer>
        <h2 className="subtitle">Model Architecture</h2>
          <ModelSelect value={selectedModel} onChange={handleModelSelect}>
            <option value="">Select Model Architecture</option>
            <option value="resnet">ResNet</option>
            <option value="cnn">CNN</option>
          </ModelSelect>
          {showCustomClasses && (
            <FormSection>
              <FormTitle>Upload Custom Classes</FormTitle>
              <UploadForm onSubmit={handleSubmit}>
                <ClassInput
                  type="text"
                  placeholder="Enter Dataset Name"
                  value={datasetName}
                  onChange={handleDatasetNameChange}
                />
                {classes.map((classData, i) => (
                  <div key={i}>
                    <FormSection>
                      <FormTitle>Class Data</FormTitle>
                      <ClassInput
                        type="text"
                        placeholder="Enter Class Name"
                        value={classData.name}
                        onChange={(e) => handleClassNameChange(e, i)}
                      />
                    </FormSection>
                    <FileInputContainer> {/* Add a container for the file input */}
                    <ImageInput
                      type="file"
                      multiple
                      onChange={(e) => handleImageUpload(i, e.target.files)}
                    />
                  </FileInputContainer>
                  </div>
                ))}
                <ButtonContainer>
              <AddClassButton onClick={addClass}>Add Class</AddClassButton>
              <SubmitButton type="submit">Upload & Submit</SubmitButton>
              </ButtonContainer>
              </UploadForm>
              
            </FormSection>
          )}
          {showAdvancedOptions && (
            <FormSection>
              <FormTitle>Advanced Options</FormTitle>
              <form onSubmit={handleAdvancedOptionsSubmit}>
                <EpochSelect value={epochs} onChange={handleEpochsChange}>
                  {[5, 6, 7, 8, 9, 10].map((epoch) => (
                    <option key={epoch} value={epoch}>{epoch}</option>
                  ))}
                </EpochSelect>
                <LearningRateInput
                  type="number"
                  step="0.0001"
                  placeholder="Learning Rate"
                  value={learningRate}
                  onChange={handleLearningRateChange}
                />
                <BatchSizeInput
                  type="number"
                  placeholder="Batch Size"
                  value={batchSize}
                  onChange={handleBatchSizeChange}
                />
                <TrainButton type="button" onClick={handleTrain}>Train</TrainButton>
              </form>
            </FormSection>
          )}
        </FormContainer>
      </PageContainer>
      <Footer></Footer>
    </>
  );
};

export default TrainTissue;
>>>>>>> 8655ceccc37e8fd8d0bdcbd17d190dc036418d41
